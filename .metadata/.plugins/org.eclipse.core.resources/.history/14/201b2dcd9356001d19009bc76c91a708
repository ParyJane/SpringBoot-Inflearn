package hello.hellospring.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.fail;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import hello.hellospring.domain.Member;
import hello.hellospring.repository.MemoryMemberRepository;

class MemberServiceTest {
	
	MemoryMemberRepository memberRepository;
	MemberService memberService;
	
	@BeforeEach
	public void beforeEach() {
		memberRepository = new MemoryMemberRepository();
		memberService = new MemberService(memberRepository);
	}
	
	@AfterEach
	public void afterEach() {
		memberRepository.clearStore();
	}
	
	@Test
	public void 회원가입() {
		
		//given
		Member member = new Member();
		member.setName("spring");
		
		//when
		Long saveId = memberService.join(member);
		
		//then
		Member findMember = memberRepository.findById(saveId).get();
		Assertions.assertThat(saveId).isEqualTo(findMember.getId());
	}
	
	@Test
	public void 중복_회원_예외() {
		
		//given
		Member member1 = new Member();
		member1.setName("spring");
		
		Member member2 = new Member();
		member2.setName("spring");
		
		//when
		memberService.join(member1);
		
		//then
		IllegalStateException e = assertThrows()
		/*
		try {
			memberService.join(member2);
		} catch(IllegalStateException e) {
			Assertions.assertThat(e.getMessage()).isEqualToNormalizingUnicode("이미 존재하는 회원입니다.");
		}
		*/
	}

	@Test
	public void testFindMembers() {
		fail("Not yet implemented");
	}

	@Test
	public void testFindOne() {
		fail("Not yet implemented");
	}

}
